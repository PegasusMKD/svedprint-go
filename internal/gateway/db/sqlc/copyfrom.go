// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package sqlc

import (
	"context"
)

// iteratorForBatchInsertRequestLogs implements pgx.CopyFromSource.
type iteratorForBatchInsertRequestLogs struct {
	rows                 []BatchInsertRequestLogsParams
	skippedFirstNextCall bool
}

func (r *iteratorForBatchInsertRequestLogs) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBatchInsertRequestLogs) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Timestamp,
		r.rows[0].Method,
		r.rows[0].IncomingPath,
		r.rows[0].RedirectedPath,
		r.rows[0].UserID,
		r.rows[0].Realm,
		r.rows[0].StatusCode,
		r.rows[0].ResponseTimeMs,
		r.rows[0].UpstreamService,
		r.rows[0].ErrorMessage,
	}, nil
}

func (r iteratorForBatchInsertRequestLogs) Err() error {
	return nil
}

func (q *Queries) BatchInsertRequestLogs(ctx context.Context, arg []BatchInsertRequestLogsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"request_logs"}, []string{"timestamp", "method", "incoming_path", "redirected_path", "user_id", "realm", "status_code", "response_time_ms", "upstream_service", "error_message"}, &iteratorForBatchInsertRequestLogs{rows: arg})
}
