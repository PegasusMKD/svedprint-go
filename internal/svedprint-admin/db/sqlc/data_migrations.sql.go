// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: data_migrations.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDataMigration = `-- name: CreateDataMigration :one
insert into data_migrations (
    migration_name,
    description,
    executed_by,
    status
) values (
    $1,
    $2,
    $3,
    'pending'
) returning id, migration_name, description, executed_by, executed_at, status, error_message, records_processed, records_failed
`

type CreateDataMigrationParams struct {
	MigrationName string
	Description   pgtype.Text
	ExecutedBy    pgtype.UUID
}

func (q *Queries) CreateDataMigration(ctx context.Context, arg CreateDataMigrationParams) (DataMigration, error) {
	row := q.db.QueryRow(ctx, createDataMigration, arg.MigrationName, arg.Description, arg.ExecutedBy)
	var i DataMigration
	err := row.Scan(
		&i.ID,
		&i.MigrationName,
		&i.Description,
		&i.ExecutedBy,
		&i.ExecutedAt,
		&i.Status,
		&i.ErrorMessage,
		&i.RecordsProcessed,
		&i.RecordsFailed,
	)
	return i, err
}

const getDataMigrationByName = `-- name: GetDataMigrationByName :one
select id, migration_name, description, executed_by, executed_at, status, error_message, records_processed, records_failed from data_migrations
where migration_name = $1
`

func (q *Queries) GetDataMigrationByName(ctx context.Context, migrationName string) (DataMigration, error) {
	row := q.db.QueryRow(ctx, getDataMigrationByName, migrationName)
	var i DataMigration
	err := row.Scan(
		&i.ID,
		&i.MigrationName,
		&i.Description,
		&i.ExecutedBy,
		&i.ExecutedAt,
		&i.Status,
		&i.ErrorMessage,
		&i.RecordsProcessed,
		&i.RecordsFailed,
	)
	return i, err
}

const getDataMigrationsByStatus = `-- name: GetDataMigrationsByStatus :many
select id, migration_name, description, executed_by, executed_at, status, error_message, records_processed, records_failed from data_migrations
where status = $1
order by executed_at desc
`

func (q *Queries) GetDataMigrationsByStatus(ctx context.Context, status MigrationStatus) ([]DataMigration, error) {
	rows, err := q.db.Query(ctx, getDataMigrationsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DataMigration
	for rows.Next() {
		var i DataMigration
		if err := rows.Scan(
			&i.ID,
			&i.MigrationName,
			&i.Description,
			&i.ExecutedBy,
			&i.ExecutedAt,
			&i.Status,
			&i.ErrorMessage,
			&i.RecordsProcessed,
			&i.RecordsFailed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDataMigrations = `-- name: ListDataMigrations :many
select id, migration_name, description, executed_by, executed_at, status, error_message, records_processed, records_failed from data_migrations
order by executed_at desc
`

func (q *Queries) ListDataMigrations(ctx context.Context) ([]DataMigration, error) {
	rows, err := q.db.Query(ctx, listDataMigrations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DataMigration
	for rows.Next() {
		var i DataMigration
		if err := rows.Scan(
			&i.ID,
			&i.MigrationName,
			&i.Description,
			&i.ExecutedBy,
			&i.ExecutedAt,
			&i.Status,
			&i.ErrorMessage,
			&i.RecordsProcessed,
			&i.RecordsFailed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDataMigrationStatus = `-- name: UpdateDataMigrationStatus :exec
update data_migrations
set
    status = $1,
    error_message = $2,
    records_processed = $3,
    records_failed = $4
where id = $5
`

type UpdateDataMigrationStatusParams struct {
	Status           MigrationStatus
	ErrorMessage     pgtype.Text
	RecordsProcessed pgtype.Int4
	RecordsFailed    pgtype.Int4
	ID               int64
}

func (q *Queries) UpdateDataMigrationStatus(ctx context.Context, arg UpdateDataMigrationStatusParams) error {
	_, err := q.db.Exec(ctx, updateDataMigrationStatus,
		arg.Status,
		arg.ErrorMessage,
		arg.RecordsProcessed,
		arg.RecordsFailed,
		arg.ID,
	)
	return err
}
