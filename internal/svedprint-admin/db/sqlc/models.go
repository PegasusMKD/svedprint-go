// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AcademicLevel string

const (
	AcademicLevelFirstYear  AcademicLevel = "first_year"
	AcademicLevelSecondYear AcademicLevel = "second_year"
	AcademicLevelJuniorYear AcademicLevel = "junior_year"
	AcademicLevelSeniorYear AcademicLevel = "senior_year"
)

func (e *AcademicLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AcademicLevel(s)
	case string:
		*e = AcademicLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for AcademicLevel: %T", src)
	}
	return nil
}

type NullAcademicLevel struct {
	AcademicLevel AcademicLevel
	Valid         bool // Valid is true if AcademicLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAcademicLevel) Scan(value interface{}) error {
	if value == nil {
		ns.AcademicLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AcademicLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAcademicLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AcademicLevel), nil
}

type MigrationStatus string

const (
	MigrationStatusPending    MigrationStatus = "pending"
	MigrationStatusInProgress MigrationStatus = "in_progress"
	MigrationStatusCompleted  MigrationStatus = "completed"
	MigrationStatusFailed     MigrationStatus = "failed"
	MigrationStatusRolledBack MigrationStatus = "rolled_back"
)

func (e *MigrationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MigrationStatus(s)
	case string:
		*e = MigrationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for MigrationStatus: %T", src)
	}
	return nil
}

type NullMigrationStatus struct {
	MigrationStatus MigrationStatus
	Valid           bool // Valid is true if MigrationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMigrationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.MigrationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MigrationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMigrationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MigrationStatus), nil
}

type SchoolType string

const (
	SchoolTypeGymnasium    SchoolType = "gymnasium"
	SchoolTypeProfessional SchoolType = "professional"
)

func (e *SchoolType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SchoolType(s)
	case string:
		*e = SchoolType(s)
	default:
		return fmt.Errorf("unsupported scan type for SchoolType: %T", src)
	}
	return nil
}

type NullSchoolType struct {
	SchoolType SchoolType
	Valid      bool // Valid is true if SchoolType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSchoolType) Scan(value interface{}) error {
	if value == nil {
		ns.SchoolType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SchoolType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSchoolType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SchoolType), nil
}

type StudyType string

const (
	StudyTypeRegular   StudyType = "regular"
	StudyTypeIrregular StudyType = "irregular"
)

func (e *StudyType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StudyType(s)
	case string:
		*e = StudyType(s)
	default:
		return fmt.Errorf("unsupported scan type for StudyType: %T", src)
	}
	return nil
}

type NullStudyType struct {
	StudyType StudyType
	Valid     bool // Valid is true if StudyType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStudyType) Scan(value interface{}) error {
	if value == nil {
		ns.StudyType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StudyType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStudyType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StudyType), nil
}

type SubjectOrientations string

const (
	SubjectOrientationsGeneral SubjectOrientations = "general"
	SubjectOrientationsPma     SubjectOrientations = "pma"
	SubjectOrientationsPmb     SubjectOrientations = "pmb"
)

func (e *SubjectOrientations) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SubjectOrientations(s)
	case string:
		*e = SubjectOrientations(s)
	default:
		return fmt.Errorf("unsupported scan type for SubjectOrientations: %T", src)
	}
	return nil
}

type NullSubjectOrientations struct {
	SubjectOrientations SubjectOrientations
	Valid               bool // Valid is true if SubjectOrientations is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubjectOrientations) Scan(value interface{}) error {
	if value == nil {
		ns.SubjectOrientations, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SubjectOrientations.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubjectOrientations) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SubjectOrientations), nil
}

type AcademicYear struct {
	SchoolUuid       pgtype.UUID
	YearRange        string
	SchoolType       SchoolType
	LastDigitsOfYear string
	ActNumber        pgtype.Text
	ActDate          pgtype.Date
}

type DataMigration struct {
	ID               int64
	MigrationName    string
	Description      pgtype.Text
	ExecutedBy       pgtype.UUID
	ExecutedAt       pgtype.Timestamptz
	Status           MigrationStatus
	ErrorMessage     pgtype.Text
	RecordsProcessed pgtype.Int4
	RecordsFailed    pgtype.Int4
}

type School struct {
	Uuid           pgtype.UUID
	SchoolName     string
	DirectorName   pgtype.Text
	BusinessNumber pgtype.Text
	MainBook       pgtype.Text
	Ministry       pgtype.Text
	Country        pgtype.Text
	City           pgtype.Text
}

type SchoolClass struct {
	Uuid                      pgtype.UUID
	AcademicLevel             NullAcademicLevel
	Suffix                    pgtype.Text
	AcademicYearUuid          pgtype.UUID
	ResponsibleTeacherUuid    pgtype.UUID
	DefaultSubjectPackageUuid pgtype.UUID
}

type SchoolDiplomaDetail struct {
	Uuid             pgtype.UUID
	AcademicYearUuid pgtype.UUID
	PrintDate        pgtype.Date
}

type SchoolTestimonyDetail struct {
	Uuid             pgtype.UUID
	AcademicYearUuid pgtype.UUID
	TestimonyDate    pgtype.Date
}

type Subject struct {
	Uuid          pgtype.UUID
	ShortName     pgtype.Text
	FullName      pgtype.Text
	AcademicLevel AcademicLevel
	SchoolUuid    pgtype.UUID
}

type SubjectPackage struct {
	Uuid             pgtype.UUID
	ShortName        pgtype.Text
	FullName         pgtype.Text
	AcademicLevel    AcademicLevel
	AcademicYearUuid pgtype.UUID
}

type SubjectPackageSubject struct {
	Uuid               pgtype.UUID
	SubjectUuid        pgtype.UUID
	SubjectPackageUuid pgtype.UUID
}

type Teacher struct {
	Uuid         pgtype.UUID
	SchoolUuid   pgtype.UUID
	FirstName    string
	MiddleName   pgtype.Text
	LastName     string
	Username     string
	Password     string
	PrintAllowed bool
}
